// Login mit Basic Authentication mit korrekten Credentials admin:123
###
# @name loginAdminCorrect
GET https://localhost/api/authenticate
Authorization: Basic admin:123

@adminToken = {{loginAdminCorrect.response.headers.Authorization}}

// Login mit Basic Authentication mit falschen Credentials
###
GET https://localhost/api/authenticate
Authorization: Basic admin:1234

### Auflisten aller Nutzer ohne Token
GET https://localhost/api/users

### Auflisten aller Nutzer mit Token(Admin)
GET https://localhost/api/users
Authorization: {{adminToken}}

### Abrufen eines konkreten Users per User-ID
GET https://localhost/api/users/admin
Authorization: {{adminToken}}

### Abrufen eines konkreten Users per User-ID
GET https://localhost/api/users/manfred
Authorization: {{manfredToken}}

// Lege zweiten User an
###
POST https://localhost/api/users
Authorization: {{adminToken}}
Content-Type: application/json

{
    "userID": "manfred",
    "firstName": "Manfred",
    "lastName": "Müller",
    "password": "asdf"
}

// Lege dritter User an
###
POST https://localhost/api/users
Authorization: {{adminToken}}
Content-Type: application/json

{
    "userID": "susi",
    "firstName": "Susi",
    "lastName": "Müller",
    "password": "asdf"
}

###
PUT https://localhost/api/users/manfred
Authorization: {{adminToken}}
Content-Type: application/json

{
    "firstName": "Manfred",
    "lastName": "Schreiber"
}

### Auflisten aller Nutzer mit Token
https://localhost/api/users
Authorization: {{adminToken}}

//
// Studiengänge
//
### Auflisten aller Studiengänge
GET https://localhost/api/degreeCourses
Authorization: {{adminToken}}

// Lege einen Studiengang an
###
# @name createDegreeCourseRequest
POST https://127.0.0.1/api/degreeCourses
Authorization: {{adminToken}}
Content-Type: application/json

{
    "universityName": "Beuth Hochschule für Technik Berlin",
    "universityShortName": "Beuth HS",
    "departmentName": "Informatik und Medien",
    "departmentShortName": "FB VI",
    "name": "Orchideenzucht Bachelor",
    "shortName": "OZ-BA"
}

###
@degreeCourseID = {{createDegreeCourseRequest.response.body.id}}

### Auflisten aller Studiengänge, es sollte jetzt einen geben
https://localhost/api/degreeCourses
Authorization: {{adminToken}}

### Abrufen von dem angelegten Studiengang
https://localhost/api/degreeCourses/{{degreeCourseID}}
Authorization: {{adminToken}}


### Ändere den Namen des Studiengangs
PUT https://localhost/api/degreeCourses/{{degreeCourseID}}
Authorization: {{adminToken}}
Content-Type: application/json

{
    "name": "Tulpenzucht"
}

### Auflisten der Studiengänge einer bestimmten Hochschule
GET https://localhost/api/degreeCourses?universityShortName=Beuth HS
Authorization: {{adminToken}}

### Auflisten aller Studienbewerbungen, es sollte noch keine geben
https://localhost/api/degreeCourseApplications
Authorization: {{adminToken}}

// Login mit Basic Authentication als manfred mit korrekten Credentials
###
# @name loginManfredCorrect
GET https://localhost/api/authenticate
Authorization: Basic manfred:123
###
@manfredToken = {{loginManfredCorrect.response.headers.Authorization}}

// Login mit Basic Authentication als susi mit korrekten Credentials
###
# @name susiloginManfredCorrect
GET https://localhost/api/authenticate
Authorization: Basic susi:asdf
###
@susiToken = {{susiloginManfredCorrect.response.headers.Authorization}}

### Studienbewerbungen für manfred auflisten (es sollte 0 sein)
GET https://localhost/api/degreeCourseApplications/myApplications
Authorization: {{manfredToken}}

// Studienbewerbung für Manfred anlegen
###
# @name createApplicationRequest
POST https://localhost/api/degreeCourseApplications
Authorization: {{manfredToken}}
Content-Type: application/json

{
    "degreeCourseID": "{{degreeCourseID}}",
    "targetPeriodYear": 2024,
    "targetPeriodShortName": "WiSe"
}

// zweite Studienbewerbung für Manfred anlegen
###
# @name secondCreateApplicationRequest
POST https://localhost/api/degreeCourseApplications
Authorization: {{manfredToken}}
Content-Type: application/json

{
    "degreeCourseID": "{{degreeCourseID}}",
    "targetPeriodYear": 2024,
    "targetPeriodShortName": "WiSe"
}

// zweite Studienbewerbung für Manfred anlegen
###
# @name secondCreateApplicationRequest
GET https://localhost/api/degreeCourseApplications/{{applicationID}}
Authorization: {{manfredToken}}

###
@applicationID = {{secondCreateApplicationRequest.response.body.id}}
// Lege dritten User an
###
POST https://localhost/api/users
Authorization: {{adminToken}}
Content-Type: application/json

{
    "userID": "susi",
    "firstName": "Susi",
    "lastName": "Sunkist",
    "password": "asdf"
}

// In diesem Fall legt der Administrator für den User susi eine Bewerbung an
###
POST https://localhost/api/degreeCourseApplications
Authorization: {{adminToken}}
Content-Type: application/json

{
    "applicantUserID": "susi",
    "degreeCourseID": "{{degreeCourseID}}",
    "targetPeriodYear": 2024,
    "targetPeriodShortName": "WiSe"
}

// In diesem Fall legt der Administrator für den User manfred erneut die gleiche Bewerbung an, das sollte scheitern
###
POST https://localhost/api/degreeCourseApplications
Authorization: {{adminToken}}
Content-Type: application/json

{
    "applicantUserID": "manfred",
    "degreeCourseID": "{{degreeCourseID}}",
    "targetPeriodYear": 2021,
    "targetPeriodShortName": "WiSe"
}

###
@applicationID = {{createApplicationRequest.response.body.id}}

### Auflisten einer Studienbewerbung
https://localhost/api/degreeCourseApplications/{{applicationID}}
Authorization: {{manfredToken}}

### Studienbewerbungen für manfred auflisten (es sollte 1 sein)
GET https://localhost/api/degreeCourseApplications/myApplications
Authorization: {{manfredToken}}

### Der Admin sucht nach Bewerbungen von Manfred
GET https://localhost/api/degreeCourseApplications?applicantUserID=manfred
Authorization: {{adminToken}}

### Auflisten der Bewerbungen für einen Studiengang
GET https://localhost/api/degreeCourseApplications?degreeCourseID={{degreeCourseID}}
Authorization: {{adminToken}}

###
// Anlegen einer Bewerbung für einen Studiengang, den es nicht gibt, Es sollte eine Fehlermeldung geben
POST https://localhost/api/degreeCourseApplications
Authorization: {{manfredToken}}
Content-Type: application/json

{
    "degreeCourseID": "gibt es nicht",
    "targetPeriodYear": 2024,
    "targetPeriodShortName": "WiSe"
}

### Nachgelagerte Suche für Studienbewerbungen
GET https://localhost/api/degreeCourses/{{degreeCourseID}}/degreeCourseApplications
Authorization: {{adminToken}}

### Ändere das Bewerbungsjahr in der existierenden Bewerbung
PUT https://localhost/api/degreeCourseApplications/{{applicationID}}
Authorization: {{manfredToken}}
Content-Type: application/json

{
    "targetPeriodYear": 2025
}

### Löschen von der Bewerbung
DELETE  https://localhost/api/degreeCourseApplications/{{applicationID}}
Authorization: {{manfredToken}}

### Löschen des Studiengangs
DELETE  https://localhost/api/degreeCourses/{{degreeCourseID}}
Authorization: {{adminToken}}

### Löschen des Users
DELETE  https://localhost/api/users/manfred
Authorization: {{adminToken}}

### Löschen des Usersapplication selbst
DELETE  https://localhost/api/degreeCourseApplications/{{applicationID}}
Authorization: {{manfredToken}}
